;; gorilla-repl.fileformat = 2

;; @@ [meta]
{:tags "svg, renderer, sample", :tagline "svg via hiccup", :name ""}

;; @@

;; **
;;; # Html SVG circle 
;; **

;; @@ [clj]
; note that since :circle should not be replaced, we output with the non-replacing renderer.
(defn circ
  [c]
   ^:r [:svg {:height 100 :width 100}
                [:circle {:cx 50 :cy 50 :r 40 :stroke "black" :stroke-width 4 :fill c}]])
;; @@
;; ->
;;; 
;; <-
;; =>
;;; [["^ ","~:type","~:hiccup","~:content",["~:span",["^ ","~:class","clj-var"],"#'user/circ"]]]
;; <=

;; @@ [clj]
(circ "red")
;; @@
;; ->
;;; 
;; <-
;; =>
;;; [["^ ","~:type","~:reagent","~:content",["^ ","~:hiccup",["~:svg",["^ ","~:height",100,"~:width",100],["~:circle",["^ ","~:cx",50,"~:cy",50,"~:r",40,"~:stroke","black","~:stroke-width",4,"~:fill","red"]]],"~:map-keywords",false]]]
;; <=

;; @@ [clj]
(circ "blue")
;; @@
;; ->
;;; 
;; <-
;; =>
;;; [["^ ","~:type","~:reagent","~:content",["^ ","~:hiccup",["~:svg",["^ ","~:height",100,"~:width",100],["~:circle",["^ ","~:cx",50,"~:cy",50,"~:r",40,"~:stroke","black","~:stroke-width",4,"~:fill","blue"]]],"~:map-keywords",false]]]
;; <=

;; @@ [clj]
^:R [:ul [:li 88] [:li 99]]

(into ^:R [:div]
(doall
 (for [i (range 3)]
  (do
  (println "hi")
  (circ "red")))))
;; @@
;; ->
;;; hi
;;; hi
;;; hi
;; <-
;; =>
;;; [["^ ","~:type","~:reagent","~:content",["^ ","~:hiccup",["~:ul",["~:li",88],["^5",99]],"~:map-keywords",true]],["^ ","^0","^1","^2",["^ ","^3",["~:div",["~:svg",["^ ","~:height",100,"~:width",100],["~:circle",["^ ","~:cx",50,"~:cy",50,"~:r",40,"~:stroke","black","~:stroke-width",4,"~:fill","red"]]],["^8",["^ ","^9",100,"^:",100],["^;",["^ ","^<",50,"^=",50,"~:r",40,"^>","black","^?",4,"^@","red"]]],["^8",["^ ","^9",100,"^:",100],["^;",["^ ","^<",50,"^=",50,"~:r",40,"^>","black","^?",4,"^@","red"]]]],"^6",true]]]
;; <=

;; @@ [clj]
(defn concentric-circles []
  ^:R [:svg {:style {:border "1px solid"
                 :background "white"
                 :width "150px"
                 :height "150px"}}
   [:circle {:r 50, :cx 75, :cy 75, :fill "green"}]
   [:circle {:r 25, :cx 75, :cy 75, :fill "blue"}]
   [:path {:stroke-width 12
           :stroke "white"
           :fill "none"
           :d "M 30,40 C 100,40 50,110 120,110"}]])
;; @@
;; ->
;;; 
;; <-
;; =>
;;; [["^ ","~:type","~:hiccup","~:content",["~:span",["^ ","~:class","clj-var"],"#'user/concentric-circles"]]]
;; <=

;; @@ [clj]
(concentric-circles)
;; @@
;; ->
;;; 
;; <-
;; =>
;;; [["^ ","~:type","~:reagent","~:content",["^ ","~:hiccup",["~:svg",["^ ","~:style",["^ ","~:border","1px solid","~:background","white","~:width","150px","~:height","150px"]],["~:circle",["^ ","~:r",50,"~:cx",75,"~:cy",75,"~:fill","green"]],["^:",["^ ","~:r",25,"^;",75,"^<",75,"^=","blue"]],["~:path",["^ ","~:stroke-width",12,"~:stroke","white","^=","none","~:d","M 30,40 C 100,40 50,110 120,110"]]],"~:map-keywords",true]]]
;; <=

;; @@ [clj]
(defn many-circles []
 (into
    ^:R [:svg {:style {:border "1px solid"
                   :background "white"
                   :width "600px"
                   :height "600px"}}
    (for [i (range 12)]
      ^{:key i} [:g {:transform (str "translate(300,300) " 
                           "rotate(" (* i 30) ") "
                           "translate(100)")}
       (concentric-circles)])]))
;; @@
;; ->
;;; 
;; <-
;; =>
;;; [["^ ","~:type","~:hiccup","~:content",["~:span",["^ ","~:class","clj-var"],"#'user/many-circles"]]]
;; <=

;; @@ [clj]
(many-circles)
;; @@
;; ->
;;; 
;; <-
;; =>
;;; [["^ ","~:type","~:reagent","~:content",["^ ","~:hiccup",["~:svg",["^ ","~:style",["^ ","~:border","1px solid","~:background","white","~:width","600px","~:height","600px"]],["~#list",[["~:g",["^ ","~:transform","translate(300,300) rotate(0) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["~:circle",["^ ","~:r",50,"~:cx",75,"~:cy",75,"~:fill","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["~:path",["^ ","~:stroke-width",12,"~:stroke","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(30) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(60) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(90) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(120) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(150) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(180) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(210) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(240) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(270) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(300) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]],["~:g",["^ ","^;","translate(300,300) rotate(330) translate(100)"],["^4",["^ ","^5",["^ ","^6","1px solid","^7","white","^8","150px","^9","150px"]],["^<",["^ ","~:r",50,"^=",75,"^>",75,"^?","green"]],["^<",["^ ","~:r",25,"^=",75,"^>",75,"^?","blue"]],["^@",["^ ","^A",12,"^B","white","^?","none","~:d","M 30,40 C 100,40 50,110 120,110"]]]]]]],"~:map-keywords",true]]]
;; <=
